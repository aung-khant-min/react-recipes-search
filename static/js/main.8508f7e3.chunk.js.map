{"version":3,"sources":["components/Ingredients.js","components/Instructions.js","App.js","serviceWorker.js","index.js"],"names":["Ingredients","props","state","ingredients","axios","get","this","recipeId","then","res","setState","data","catch","err","console","log","map","ingredient","key","name","amount","metric","value","unit","React","Component","Instructions","instructions","steps","instruction","number","step","App","handleChange","e","searchWord","target","handleEnter","keyCode","handleSearch","recipe","results","href","className","type","placeholder","onChange","onKeyUp","autoFocus","onClick","id","src","title","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4RA0CeA,E,kDAnCX,WAAYC,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAO,CACRC,YAAc,IAHJ,E,gEAOE,IAAD,OACfC,IAAMC,IAAI,uCAAuCC,KAAKL,MAAMM,SAAlD,kEACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZP,YAAaM,EAAIE,KAAKR,iBAGzBS,OAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAI3B,OACE,iCACI,gDACA,4BAEIP,KAAKJ,MAAMC,YAAYa,KACnB,SAACC,GAAD,OACA,wBAAIC,IAAKD,EAAWE,MAAOF,EAAWE,KAAtC,IAA6CF,EAAWG,OAAOC,OAAOC,MAAtE,IAA8EL,EAAWG,OAAOC,OAAOE,e,GA3BnGC,IAAMC,WCqCjBC,E,kDAnCX,WAAYzB,GAAO,IAAD,8BACd,cAAMA,IACDC,MAAO,CACRyB,aAAe,IAHL,E,gEAOE,IAAD,OACfvB,IAAMC,IAAI,uCAAuCC,KAAKL,MAAMM,SAAlD,iEACTC,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZiB,aAAclB,EAAIE,KAAK,GAAGiB,WAG7BhB,OAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BAI3B,OACE,iCACI,iDACA,4BAEIP,KAAKJ,MAAMyB,aAAaX,KACpB,SAACa,GAAD,OACA,wBAAIX,IAAKW,EAAYC,QAASD,EAAYE,e,GA3BrCP,IAAMC,WCwElBO,E,kDApEb,WAAY/B,GAAQ,IAAD,8BACjB,cAAMA,IAORgC,aAAe,SAAAC,GACb,EAAKxB,SAAS,CACdyB,WAAaD,EAAEE,OAAOd,SAVL,EAcnBe,YAAc,SAAAH,GACK,KAAdA,EAAEI,SAAgB,EAAKC,aAAa,EAAKrC,MAAMiC,aAfjC,EAkBnBI,aAAe,SAACJ,GACXA,EACH/B,IAAMC,IAAI,oDAAoD8B,EAApD,4CACP3B,MAAK,SAAAC,GACJ,EAAKC,SAAS,CACZ8B,OAAQ/B,EAAIE,KAAK8B,aAGpB7B,OAAO,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,MAExB,EAAKH,SAAS,CAAE8B,OAAO,MA1B5B,EAAKtC,MAAQ,CACXiC,WAAW,GACXK,OAAQ,IAJO,E,qDA+BT,IAAD,OAEP,OACE,6BAEE,gCACE,uBAAGE,KAAK,oCAAR,mCADF,IACiF,6BADjF,oDAKA,yBAAKC,UAAU,UACZ,2BAAOC,KAAK,OAAOD,UAAU,aAAaE,YAAY,kBACtDC,SAAUxC,KAAK2B,aAAcc,QAASzC,KAAK+B,YAAaW,WAAS,IACjE,4BAAQL,UAAU,eAAeM,QAAS,kBAAI,EAAKV,aAAa,EAAKrC,MAAMiC,cAAa,uBAAGQ,UAAU,mBAItGrC,KAAKJ,MAAMsC,OACXlC,KAAKJ,MAAMsC,OAAOxB,KAChB,SAACwB,GAAD,OACE,yBAAKG,UAAU,OAAOzB,IAAKsB,EAAOU,IAC/B,yBAAKC,IAAK,yCAAyCX,EAAOU,GAAG,aAC3D,yBAAKP,UAAU,aACZ,4BAAKH,EAAOY,OACZ,kBAAC,EAAD,CAAa7C,SAAUiC,EAAOU,KAC9B,kBAAC,EAAD,CAAc3C,SAAUiC,EAAOU,UAGvC,Q,GA7DI1B,IAAMC,WCKJ4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzD,MAAK,SAAA0D,GACJA,EAAaC,gBAEdvD,OAAM,SAAAwD,GACLtD,QAAQsD,MAAMA,EAAMC,c","file":"static/js/main.8508f7e3.chunk.js","sourcesContent":["import React from 'react';\r\nimport axios from 'axios';\r\n\r\nvar apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nclass Ingredients extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            ingredients : []\r\n        }\r\n    }\r\n\r\n    componentDidMount(){\r\n        axios.get('https://api.spoonacular.com/recipes/'+this.props.recipeId+'/ingredientWidget.json?apiKey='+apiKey)\r\n        .then(res=>{\r\n          this.setState({\r\n            ingredients: res.data.ingredients\r\n          })\r\n        })\r\n        .catch( err => console.log(err))\r\n      }\r\n\r\n    render(){\r\n        return(\r\n          <details>\r\n              <summary>Ingredients</summary>\r\n              <ul>\r\n              {\r\n                  this.state.ingredients.map(\r\n                      (ingredient) =>  \r\n                      <li key={ingredient.name}>{ingredient.name} {ingredient.amount.metric.value} {ingredient.amount.metric.unit}</li>\r\n                  )\r\n              }\r\n              </ul>\r\n          </details>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Ingredients;","import React from 'react';\r\nimport axios from 'axios';\r\n\r\nvar apiKey = process.env.REACT_APP_API_KEY;\r\n\r\nclass Instructions extends React.Component{\r\n\r\n    constructor(props){\r\n        super(props);\r\n        this.state ={\r\n            instructions : []\r\n        }\r\n    }\r\n    \r\n    componentDidMount(){\r\n        axios.get('https://api.spoonacular.com/recipes/'+this.props.recipeId+'/analyzedInstructions?apiKey='+apiKey)\r\n        .then(res=>{\r\n          this.setState({\r\n            instructions: res.data[0].steps\r\n          })\r\n        })\r\n        .catch( err => console.log(err))\r\n      }\r\n\r\n      render(){\r\n        return(\r\n          <details>\r\n              <summary>Instructions</summary>\r\n              <ul>\r\n              {\r\n                  this.state.instructions.map(\r\n                      (instruction) =>  \r\n                      <li key={instruction.number}>{instruction.step}</li>\r\n                  )\r\n              }\r\n              </ul>\r\n          </details>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Instructions;","import React from 'react';\nimport axios from 'axios';\nimport Ingredients from './components/Ingredients';\nimport Instructions from './components/Instructions';\n\nvar apiKey = process.env.REACT_APP_API_KEY;\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      searchWord:'',\n      recipe: [] \n    }\n  }\n  \n  handleChange = e =>{\n    this.setState({\n    searchWord : e.target.value\n  })\n  }\n\n  handleEnter = e =>{\n    if(e.keyCode === 13) this.handleSearch(this.state.searchWord)\n  }\n\n  handleSearch = (searchWord) => {\n    if(searchWord){\n    axios.get('https://api.spoonacular.com/recipes/search?query='+searchWord+'&apiKey='+apiKey)\n      .then(res => {\n        this.setState({\n          recipe: res.data.results\n        });\n      })\n      .catch( err => console.log(err))\n    }\n    else this.setState({ recipe:[]})\n  }\n\n  render() {\n\n    return (\n      <div>\n\n        <header>\n          <a href=\"https://spoonacular.com/food-api\">spoonacular recipe and food API</a> <br/>\n          Try search for recipes (e.g chicken,noodle etc.)\n        </header>\n\n        <div className=\"search\">\n           <input type='text' className=\"searchTerm\" placeholder=\"Search a recipe\" \n           onChange={this.handleChange} onKeyUp={this.handleEnter} autoFocus/>\n           <button className=\"searchButton\" onClick={()=>this.handleSearch(this.state.searchWord)}><i className=\"fa fa-search\"></i></button>\n        </div>\n\n        {\n          this.state.recipe ?\n          this.state.recipe.map(\n            (recipe)=>\n              <div className=\"card\" key={recipe.id}>\n                 <img src={' https://spoonacular.com/recipeImages/'+recipe.id+'-480x360'} />\n                   <div className=\"container\">\n                      <h4>{recipe.title}</h4>\n                      <Ingredients recipeId={recipe.id}/>\n                      <Instructions recipeId={recipe.id}/>\n                 </div>\n              </div>  \n          ) : ''\n        }\n\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}